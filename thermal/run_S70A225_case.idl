
;
; Create a blank template and populate with RSL site values
; Save the results for intermediate processing
;

sp=return_blank_thermal_model_structure()



;
; Set up Flat Terrain composed of dark dunes with pore-filling ice 5cm below the surface
;

sp.body_name = 'MARS'                      ; Location and geometry of surface
sp.latitude  = 83.8
sp.longitude = 235.0
sp.slope     = 0.0
sp.aspect    = 0.0
sp.elevation = -4460.0

sp.albedo            = 0.15               ; Boundary properties
sp.emissivity        = 0.9001
sp.heat_flux         = 0.03

sp.layer_top(0)      = 0.0                ; Thermophysical properties of the surface layers
sp.layer_inertia(0)  = 225.0
sp.layer_density(0)  = 1650.0
sp.layer_capacity(0) = 837.0

sp.layer_top(1)      = 0.05                ; Thermophysical properties of the surface layers
sp.layer_inertia(1)  = 2477.0
sp.layer_density(1)  = 2020.0
sp.layer_capacity(1) = 980.0

sp.daily_layers      = 15.00d0             ; Parameters to describe subsurface layers. Number of layers in
sp.annual_layers     =  6.00d0             ; the diurnal skin depth. Number of annual skin depths in model
sp.layer_growth      =  1.03d0             ; domain and geometric factor by which layer thickness increases.

sp.dt                = 200.d0              ; Force choice of timestep (leave at zero to default to Courant criterion)
sp.start_time        = 155515233.55d0      ; Start time of model
sp.run_cycles        = 15.d0               ; Number of cycles to run model for before exporting results
sp.reset_cycle       = 5.d0                ; Cycle number after which all sub-surface temperatures are reset to the surface annual mean
sp.initial_temperature = 180.d0            ; Initial guess at surface temperature
sp.numeric_scheme    = 0.5d0               ; Numerical scheme to use: 0.0 Fully Implicit, 0.5 Crank-Nicolson, 1.0 Fully Explicit or anything inbetween

sp.atm_ir            = 0.04                ; Atmospheric properties including frost
sp.atm_vis           = 0.00
sp.frost_switch      = 1.0
sp.frost_albedo      = 0.6
sp.frost_emissivity  = 0.9001

sp.run_number        = 'steepscarp_MY33_83.8N_235E_flat'
sp.flat_calculate    = sp.run_number+'.sav'                        ; Calculate flat-terrain behavior for a later sloping terrain run
sp.flat_flux_file    = ''                                          ; Radiation from surrounding flat terrain
save,sp,filename     = sp.run_number+'_parameters.sav'

;
; Set up slope parameters of dusty ice (no distinct lag) more daily layers as skin depth is higher
;


sp.albedo            = 0.25                ; Boundary properties
sp.slope             = 70.d0
sp.aspect            = 225.d0

sp.daily_layers      = 25.00d0             ; Parameters to describe subsurface layers. Number of layers in diurnal wave.

sp.layer_top(0)      = 0.000                 ; Thermophysical properties of the surface layers
sp.layer_inertia(0)  = 2152.0
sp.layer_density(0)  = 925.0
sp.layer_capacity(0) = 1615.0

sp.layer_top(1)      = 0.0                ; Thermophysical properties of the surface layers
sp.layer_inertia(1)  = 0.0
sp.layer_density(1)  = 0.0
sp.layer_capacity(1) = 0.0


sp.run_number        = 'steepscarp_MY33_83.8N_235E_S70A225'
sp.flat_calculate    = ''
sp.flat_flux_file    = 'steepscarp_MY33_83.8N_235E_flat.sav'        ; come from sp.run_number+'.sav' in the flat thermal run above
save,sp,filename     =  sp.run_number+'_parameters.sav'


.reset_session
;
; Preprocess the flat terrain and run the initial thermal model
;
 restore, 'steepscarp_MY33_83.8N_235E_flat_parameters.sav'
 preprocessed_flat = preprocess_thermal_model(sp)
 results_flat = thermal_model_v07(preprocessed_flat)



;;;;;;;;;;;;;;;;;;;;;;;;;
.reset_session
;;;;;;;;;;;;;;;;;;;;;;;;;

results_flat = 'steepscarp_MY33_83.8N_235E_flat_results.sav'


;
; Read DISORT interpolation Tables.
;

rdfits_struct,"../pickle/DISORT_MCD_MY33_83.8N_235E_S70A225.fits",pp
thermal      = transpose(pp.im1)
flat_thermal = transpose(pp.im2)
i_ls         = pp.im3
i_temp       = pp.im4
i_emm        = pp.im5
i_az         = pp.im6
i_umu0       = pp.im7
i_alb        = pp.im8
vis          = transpose(pp.im9)
flat_vis     = transpose(pp.im10)


;
; Use the thermal model results to update radiation
;
.run
for cc = 1,2 do begin  ; iterate to converge on flat thermal solution

restore, results_flat

; 
; lsubs, solarAZ, UMU0 available, setup Albedo, Emissivity, Temperature
vf = where(mc GT 0,COMPLEMENT=vnf)

alb     = rebin([sp.albedo],n_elements(mc))
alb[vf] = sp.frost_albedo

emm     = rebin([sp.emissivity],n_elements(mc))
emm[vf] = sp.frost_emissivity

temp = itt[*,0]

;
; Thermal fluxes interpolation
;
v_ls   = (interpol(findgen(n_elements(i_ls)),i_ls,ls)       )>0<n_elements(i_ls)
v_temp = (interpol(findgen(n_elements(i_temp)),i_temp,temp) )>0<n_elements(i_temp)
v_emm  = (interpol(findgen(n_elements(i_emm)),i_emm,emm)    )>0<n_elements(i_emm)

thermal_i      = interpolate(thermal,     v_ls,v_temp,v_emm)
flat_thermal_i = interpolate(flat_thermal,v_ls,v_temp,v_emm)

;
; Visible fluxes interpolation
;
az2 = ((az+2.d0*!dpi) mod (2.d0*!dpi))
v_az   = (interpol(findgen(n_elements(i_az)),  i_az,  az2    ))>0<n_elements(i_az)
v_umu0 = (interpol(findgen(n_elements(i_umu0)),i_umu0,cos_i ))>0<n_elements(i_umu0)
v_alb  = (interpol(findgen(n_elements(i_alb)), i_alb, alb   ))>0<n_elements(i_alb)

visible_i       = interpolate(vis[*,*,*,0],     v_ls,v_az,v_umu0)
flat_visible_i  = interpolate(flat_vis[*,*,*,0],v_ls,v_az,v_umu0)
visible_if      = interpolate(vis[*,*,*,2],     v_ls,v_az,v_umu0)
flat_visible_if = interpolate(flat_vis[*,*,*,2],v_ls,v_az,v_umu0)

visible_i[vf]      = visible_if[vf]
flat_visible_i[vf] = flat_visible_if[vf]

visible_i(where(cos_i LT 0)) = 0.d0
flat_visible_i(where(cos_i LT 0)) = 0.d0

;
; Update the flat preprocessed file and run thermal model again 
;
preprocessed_flat = sp.run_number+'_preprocessed.sav'
restore,preprocessed_flat

swf = flat_visible_i
lwf = flat_thermal_i
save,sp,rho,cap,kon,nl,z,dz,ci,vva,vvb,nt,tim,dt,ls,ltst,swf,swf2,swf2f,lwf,cs2,cs2f,t_ice,t,ot,ts,mco2,sin_dec,sol_dist,cos_i,az,filename=preprocessed_flat

old_temp = temp
old_mc = mc
results_flat = thermal_model_v07(preprocessed_flat)
restore, results_flat
temp = itt[*,0]


; Compare old_temp and temp
window,0
plot,ls,temp,ps=3
oplot,ls,old_temp,color=255,ps=3
window,1
plot,ls,mc,ps=3
oplot,ls,old_mc,color=255,ps=3

endfor
end


;
; NOW ALTER THE SLOPING SURFACE RUN
;

restore,'steepscarp_MY33_83.8N_235E_S70A225_parameters.sav'

sp.layer_inertia(0)  = sqrt((651.0/189.0) * sp.layer_density(0) * sp.layer_capacity(0))
sp.albedo            = 0.2

preprocessed_slope = preprocess_thermal_model(sp)          
restore,preprocessed_slope

swf = visible_i
lwf = thermal_i
save,sp,rho,cap,kon,nl,z,dz,ci,vva,vvb,nt,tim,dt,ls,ltst,swf,swf2,swf2f,lwf,cs2,cs2f,t_ice,t,ot,ts,mco2,sin_dec,sol_dist,cos_i,az,filename=preprocessed_slope

results_slope = thermal_model_v07(preprocessed_slope)
restore, results_slope

plot,ls,itt[*,0],ps=3



;;;;;;;;;;;;;;;;;;;;;;;;;
.reset_session
;;;;;;;;;;;;;;;;;;;;;;;;;

cd,'../stress'
fn1 = stress_from_temp_results('../thermal/steepscarp_MY33_83.8N_235E_S70A225_results.sav',d=1d-3)
fn2 = stress_from_temp_results('../thermal/steepscarp_MY33_83.8N_235E_S70A225_results.sav',d=1d-4)
fn3 = stress_from_temp_results('../thermal/steepscarp_MY33_83.8N_235E_S70A225_results.sav',d=1d-5)

;
; Plot results
;
restore,fn1
.run ../figure_production/surface_and_subsurface_temps_stress.idl
restore,fn2
.run ../figure_production/surface_and_subsurface_temps_stress.idl
restore,fn3
.run ../figure_production/surface_and_subsurface_temps_stress.idl


end

